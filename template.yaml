AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Parameters:
  ReadCapacityUnit:
    Description: Read Capacity Unit for DynamoDB Tables
    Type: Number
    Default: 5
  WriteCapacityUnit:
    Description: Write Capacity Unit for DynamoDB Tables
    Type: Number
    Default: 5

Resources:
  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref ReadCapacityUnit
        WriteCapacityUnits: !Ref WriteCapacityUnit
  GroupTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref ReadCapacityUnit
        WriteCapacityUnits: !Ref WriteCapacityUnit
  AccessTokenTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "access_token"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "access_token"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref ReadCapacityUnit
        WriteCapacityUnits: !Ref WriteCapacityUnit
  PermissionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref ReadCapacityUnit
        WriteCapacityUnits: !Ref WriteCapacityUnit
  InvitedUserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "email"
          AttributeType: "S"
        -
          AttributeName: "auth_type"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "email"
          KeyType: "HASH"
        -
          AttributeName: "auth_type"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref ReadCapacityUnit
        WriteCapacityUnits: !Ref WriteCapacityUnit
  UserGroupTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "user_id"
          AttributeType: "S"
        -
          AttributeName: "group_id"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "user_id"
          KeyType: "HASH"
        -
          AttributeName: "group_id"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref ReadCapacityUnit
        WriteCapacityUnits: !Ref WriteCapacityUnit
  LambdaFunctionIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Sid: "AllowLambdaServiceToAssumeRole"
            Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        -
          PolicyName: "InlinePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "dynamodb:DeleteItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                  - "dynamodb:UpdateItem"
                  - "kms:Encrypt"
                  - "kms:Decrypt"
                Resource: "*"
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
  PorperLambdaLayer:
      Type: AWS::Serverless::LayerVersion
      Properties:
          Description: Porper Core as a Layer
          ContentUri: ./src
          CompatibleRuntimes:
            - python3.6
            - python3.7
  AuthorizerLambdaFunctionIAMRole:
      Type: "AWS::IAM::Role"
      Properties:
          Path: "/"
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Sid: "AllowLambdaServiceToAssumeRole"
                Effect: "Allow"
                Action:
                  - "sts:AssumeRole"
                Principal:
                  Service:
                    - "lambda.amazonaws.com"
          Policies:
            -
              PolicyName: "InlinePolicy"
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  -
                    Effect: "Allow"
                    Action:
                      - "logs:CreateLogGroup"
                      - "logs:CreateLogStream"
                      - "logs:PutLogEvents"
                    Resource: "arn:aws:logs:*:*:*"
                  -
                    Effect: "Allow"
                    Action:
                      - "dynamodb:*"
                    Resource: "*"
  AuthorizerLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: porper_authorizer.lambda_handler
      Runtime: python3.6
      CodeUri: ./lambda
      Layers:
        - !Ref PorperLambdaLayer
      Role: !GetAtt AuthorizerLambdaFunctionIAMRole.Arn
      Timeout: 300
  InitializerLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: init_dynamodb.lambda_handler
      Runtime: python3.6
      CodeUri: ./lambda
      Layers:
        - !Ref PorperLambdaLayer
      Role: !GetAtt LambdaFunctionIAMRole.Arn
      Timeout: 300
      Environment:
        Variables:
          GROUP_TABLE_NAME: !Ref GroupTable
Outputs:
  PorperLambdaLayerArn:
    Description: "Porper Lambda Layer ARN"
    Value: !Ref PorperLambdaLayer
  AuthorizerLambdaFunctionArn:
    Description: "Authorizer Lambda Function ARN"
    Value: !GetAtt AuthorizerLambdaFunction.Arn
  InitializerLambdaFunctionArn:
    Description: "Initializer Lambda Function ARN"
    Value: !GetAtt InitializerLambdaFunction.Arn
